{"version":3,"sources":["app/components/container/ShortCutContainer.jsx","app/desktop/TaskBar.jsx","app/desktop/index.jsx","app/config/main/index.js","App.js","serviceWorker.js","index.js"],"names":["ShortCutContainer","StartMenu","state","open","setOpen","flag","setState","handleClick","handleClose","this","style","position","display","horizontalAlign","verticalAlign","onClick","disabled","active","fontWeight","React","PureComponent","TaskBarInfo","marginRight","TaskBar","config","taskBarPosition","justifyContent","DesktopStyles","height","Desktop","props","theme","background","apps","MainConfig","themes","default","ResetStyles","createGlobalStyle","reset","FullScreenStyle","top","right","bottom","left","Boolean","window","location","hostname","match","ReactDOM","render","className","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAWeA,EANW,WACxB,OACE,M,wCCCEC,E,2MACJC,MAAQ,CACNC,MAAM,G,EAGRC,QAAU,SAACC,GACT,EAAKC,SAAS,CACZH,KAAME,K,EAIVE,YAAc,WACZ,EAAKH,SAAS,EAAKF,MAAMC,O,EAG3BK,YAAc,WACZ,EAAKJ,SAAQ,I,wEAGL,IACAD,EAASM,KAAKP,MAAdC,KAER,OACE,yBAAKO,MAAO,CAAEC,SAAU,WAAYC,QAAS,iBAC1CT,GACC,kBAAC,OAAD,CAAMU,gBAAgB,OAAOC,cAAc,SAASX,KAAMA,EAAMY,QAASN,KAAKD,aAC5E,kBAAC,WAAD,+CACA,kBAAC,WAAD,gCACA,kBAAC,UAAD,MACA,kBAAC,WAAD,CAAUQ,UAAQ,GAAlB,wBAGJ,kBAAC,SAAD,CAAQD,QAASN,KAAKF,YAAaU,OAAQd,EAAMO,MAAO,CAAEQ,WAAY,SAAtE,c,GAhCgBC,IAAMC,eA2CxBC,EAAc,WAClB,OACE,yBAAKX,MAAO,CAAEY,YAAa,SAA3B,gBAyBWC,EAjBC,SAAC,GAAe,EAAbC,OACTC,gBAER,OACE,kBAAC,SAAD,KACE,kBAAC,UAAD,CAASf,MAAO,CAAEgB,eAAgB,kBAEhC,kBAAC,EAAD,MAEA,kBAAC,EAAD,S,yjBC9DR,IAAMC,EAAgB,CACpBC,OAAQ,QAsBKC,EAnBC,SAACC,GAAW,IAClBN,EAAWM,EAAXN,OAER,OACE,kBAAC,gBAAD,CAAeO,MAAOP,EAAOO,OAE3B,yBAAKrB,MAAK,KAAOiB,EAAP,CAAsBK,WAAYR,EAAOQ,cAEjD,kBAAC,EAAD,CAASR,OAAQA,IAEjB,kBAAC,EAAD,CAAmBS,KAAMT,EAAOS,UCNzBC,EAVI,CACjBH,MAAOI,SAAOC,QACdJ,WAAY,OACZC,KAAM,I,8ECwBR,IAAMI,EAAcC,4BAAH,IACbC,SAGEC,EAAkB,CACtB7B,SAAU,WACV8B,IAAK,IACLC,MAAO,IACPC,OAAQ,IACRC,KAAM,KC9BYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFuCD,SAAArB,GAAK,OAClB,yBAAKsB,UAAU,MAAM1C,MAAO8B,GAC1B,kBAACH,EAAD,MACA,kBAAC,EAAD,CAASb,OAAQU,OE1CL,MAASmB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9fd91ca7.chunk.js","sourcesContent":["\n\n/*\n  桌面快捷方式列表\n */\nconst ShortCutContainer = () => {\n  return (\n    null\n  )\n}\n\nexport default ShortCutContainer;\n","import React from 'react';\nimport {\n  AppBar, Toolbar, Button, List, ListItem, Divider\n} from 'react95';\n\n/*\n  开始菜单\n */\nclass StartMenu extends React.PureComponent {\n  state = {\n    open: false\n  };\n\n  setOpen = (flag) => {\n    this.setState({\n      open: flag\n    });\n  }\n\n  handleClick = () => {\n    this.setOpen(!this.state.open);\n  }\n\n  handleClose = () => {\n    this.setOpen(false);\n  }\n\n  render() {\n    const { open } = this.state;\n\n    return (\n      <div style={{ position: 'relative', display: 'inline-block' }}>\n        {open && (\n          <List horizontalAlign=\"left\" verticalAlign=\"bottom\" open={open} onClick={this.handleClose}>\n            <ListItem>👨‍💻 Profile</ListItem>\n            <ListItem>📁 My account</ListItem>\n            <Divider />\n            <ListItem disabled>🔙 Logout</ListItem>\n          </List>\n        )}\n        <Button onClick={this.handleClick} active={open} style={{ fontWeight: 'bold' }}>\n          Start\n        </Button>\n      </div>\n    );\n  }\n}\n\n/*\n  右侧信息栏\n */\nconst TaskBarInfo = () => {\n  return (\n    <div style={{ marginRight: '10px' }}>TeaTimeCode</div>\n  );\n}\n\n\n/*\n  任务栏\n */\nconst TaskBar = ({ config }) => {\n  const { taskBarPosition } = config;\n\n  return (\n    <AppBar>\n      <Toolbar style={{ justifyContent: 'space-between' }}>\n\n        <StartMenu />\n\n        <TaskBarInfo />\n\n      </Toolbar>\n    </AppBar>\n\n  )\n};\n\nexport default TaskBar;\n","import React from 'react';\nimport { ThemeProvider } from \"styled-components\";\nimport { AppBar, LogoIcon, Toolbar,  } from 'react95';\n\nimport ShortCutContainer from 'scripts/app/components/container/ShortCutContainer';\nimport TaskBar from './TaskBar';\n\n\nconst DesktopStyles = {\n  height: '100%',\n}\n\nconst Desktop = (props) => {\n  const { config } = props;\n\n  return (\n    <ThemeProvider theme={config.theme}>\n\n      <div style={{ ...DesktopStyles, background: config.background }}>\n\n        <TaskBar config={config}/>\n\n        <ShortCutContainer apps={config.apps} />\n\n      </div>\n\n    </ThemeProvider>\n  )\n};\n\n\nexport default Desktop;\n","import { themes } from 'react95';\n\n\n/*\n  每一个Win95桌面应用有一个主的config，\n */\nconst MainConfig = {\n  theme: themes.default,\n  background: 'teal',\n  apps: [\n\n  ],\n\n}\n\n\nexport default MainConfig;\n","// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n//\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n//\n// export default App;\n\nimport React from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { reset } from \"react95\";\nimport Desktop from 'scripts/app/desktop';\nimport MainConfig from 'scripts/app/config/main';\n\nconst ResetStyles = createGlobalStyle`\n  ${reset}\n`;\n\nconst FullScreenStyle = {\n  position: 'absolute',\n  top: '0',\n  right: '0',\n  bottom: '0',\n  left: '0',\n};\n\nexport default props =>\n  <div className=\"App\" style={FullScreenStyle}>\n    <ResetStyles />\n    <Desktop config={MainConfig}/>\n  </div>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}